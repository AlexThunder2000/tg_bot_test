import express, { Request, Response } from "express";
import { Bot, webhookCallback, InlineKeyboard } from "grammy";
import { CATEGORIES } from "./data";

const token = process.env.BOT_TOKEN!;
const secret = process.env.SECRET_TOKEN || "secret";

if (!token) {
  throw new Error("BOT_TOKEN is required");
}

const bot = new Bot(token);

/* ---------- helper keyboards ---------- */
function kbMain() {
  return new InlineKeyboard()
    .text("–û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "menu:services").row()
    .text("–¢–µ—Ö–Ω—ñ–∫–∞ –≤–ø—Ä–∞–≤", "menu:technique").row()
    .text("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏", "menu:extra");
}

function kbCategories() {
  const kb = new InlineKeyboard();
  for (const c of CATEGORIES) kb.text(c.title, `cat:${c.key}`).row();
  kb.text("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ", "menu:root");
  return kb;
}

function kbSubgroups(catKey: string) {
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const kb = new InlineKeyboard();
  cat?.subgroups?.forEach((sg) => kb.text(sg.title, `sub:${catKey}:${sg.key}`).row());
  kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –≥—Ä—É–ø", "menu:technique").row().text("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ", "menu:root");
  return kb;
}

function kbExercisesInCat(catKey: string) {
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const kb = new InlineKeyboard();
  (cat?.exercises ?? []).forEach((x, i) => kb.text(x.title, `ex:${catKey}::${i}`).row());
  kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –≥—Ä—É–ø", "menu:technique").row().text("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ", "menu:root");
  return kb;
}

function kbExercisesInSub(catKey: string, subKey: string) {
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const sg = cat?.subgroups?.find((s) => s.key === subKey);
  const kb = new InlineKeyboard();
  (sg?.exercises ?? []).forEach((x, i) => kb.text(x.title, `ex:${catKey}:${subKey}:${i}`).row());
  kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –ø—ñ–¥–≥—Ä—É–ø", `cat:${catKey}`).row().text("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ", "menu:root");
  return kb;
}

/* ---------- menus ---------- */
// /start
bot.command("start", (ctx) =>
  ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª üëá", { reply_markup: kbMain() })
);

// –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏
bot.callbackQuery("menu:services", async (ctx) => {
  await ctx.editMessageText("–¢—É—Ç –±—É–¥–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏.\n–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è: /start");
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("menu:extra", async (ctx) => {
  await ctx.editMessageText("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ (PDF/–ø–æ—Å–∏–ª–∞–Ω–Ω—è).\n–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è: /start");
  await ctx.answerCallbackQuery();
});

// 7 –≥—Ä—É–ø
bot.callbackQuery("menu:technique", async (ctx) => {
  await ctx.editMessageText("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –º'—è–∑—ñ–≤:", { reply_markup: kbCategories() });
  await ctx.answerCallbackQuery();
});

// –Ω–∞–∑–∞–¥ –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
bot.callbackQuery("menu:root", async (ctx) => {
  await ctx.editMessageText("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª üëá", { reply_markup: kbMain() });
  await ctx.answerCallbackQuery();
});

/* ---------- categories / subgroups ---------- */
bot.callbackQuery(/^cat:(.+)$/, async (ctx) => {
  const key = ctx.match![1];
  const cat = CATEGORIES.find((c) => c.key === key);
  if (!cat) return ctx.answerCallbackQuery({ text: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  if (cat.subgroups?.length) {
    await ctx.editMessageText(`–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–≥—Ä—É–ø—É:`, { reply_markup: kbSubgroups(cat.key) });
  } else {
    const list = cat.exercises ?? [];
    const kb = kbExercisesInCat(cat.key);
    await ctx.editMessageText(
      list.length ? `–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:` : `–ì—Ä—É–ø–∞: ${cat.title}\n(–ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–ø—Ä–∞–≤)`,
      { reply_markup: kb }
    );
  }
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/^sub:([^:]+):(.+)$/, async (ctx) => {
  const [catKey, subKey] = [ctx.match![1], ctx.match![2]];
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const sg = cat?.subgroups?.find((s) => s.key === subKey);
  if (!cat || !sg) return ctx.answerCallbackQuery({ text: "–ü—ñ–¥–≥—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  await ctx.editMessageText(`–ì—Ä—É–ø–∞: ${cat.title} ‚Üí ${sg.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`, {
    reply_markup: kbExercisesInSub(catKey, subKey),
  });
  await ctx.answerCallbackQuery();
});

/* ---------- sending video with action buttons ---------- */
// callback_data —Ñ–æ—Ä–º–∞—Ç–∏:
//   ex:<catKey>::<idx>           ‚Äî –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –±–µ–∑ –ø—ñ–¥–≥—Ä—É–ø
//   ex:<catKey>:<subKey>:<idx>   ‚Äî –¥–ª—è –ø—ñ–¥–≥—Ä—É–ø
bot.callbackQuery(/^ex:([^:]+):(.*):(\d+)$/, async (ctx) => {
  const [catKey, maybeSub, idxStr] = [ctx.match![1], ctx.match![2], ctx.match![3]];
  const cat = CATEGORIES.find((c) => c.key === catKey);
  if (!cat) return ctx.answerCallbackQuery({ text: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  let title: string | undefined;
  let fileId: string | undefined;
  let backCb: string; // –∫—É–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—ñ–¥–µ–æ

  if (cat.subgroups?.length && maybeSub) {
    const sg = cat.subgroups.find((s) => s.key === maybeSub);
    const ex = sg?.exercises?.[Number(idxStr)];
    title = ex?.title;
    fileId = ex?.fileId;
    backCb = `back:sub:${catKey}:${maybeSub}`; // –Ω–∞–∑–∞–¥ —É —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤ –ø—ñ–¥–≥—Ä—É–ø–∏
  } else {
    const ex = cat.exercises?.[Number(idxStr)];
    title = ex?.title;
    fileId = ex?.fileId;
    backCb = `back:cat:${catKey}`; // –Ω–∞–∑–∞–¥ —É —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  }

  if (!fileId) return ctx.answerCallbackQuery({ text: "–í–ø—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  const underVideoKb = new InlineKeyboard()
    .text("‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", backCb).row()
    .text("‚úñ –ó–∞–∫—Ä–∏—Ç–∏", `del:${Date.now()}`);

  if (title) await ctx.replyWithVideo(fileId, { caption: title, reply_markup: underVideoKb });
  else await ctx.replyWithVideo(fileId, { reply_markup: underVideoKb });

  await ctx.answerCallbackQuery();
});

/* ---------- back buttons that reply with the list (not edit video) ---------- */
bot.callbackQuery(/^back:cat:([^:]+)$/, async (ctx) => {
  const catKey = ctx.match![1];
  const cat = CATEGORIES.find((c) => c.key === catKey);
  if (!cat) return ctx.answerCallbackQuery({ text: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  if (cat.subgroups?.length) {
    // –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –≤–∏–∫–ª–∏—á—É—Ç—å —Ü—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø—ñ–¥–≥—Ä—É–ø–∞–º–∏
    await ctx.reply(`–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–≥—Ä—É–ø—É:`, { reply_markup: kbSubgroups(cat.key) });
  } else {
    const list = cat.exercises ?? [];
    const kb = kbExercisesInCat(cat.key);
    await ctx.reply(list.length ? `–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:` : `–ì—Ä—É–ø–∞: ${cat.title}\n(–ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–ø—Ä–∞–≤)`, {
      reply_markup: kb,
    });
  }
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/^back:sub:([^:]+):(.+)$/, async (ctx) => {
  const [catKey, subKey] = [ctx.match![1], ctx.match![2]];
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const sg = cat?.subgroups?.find((s) => s.key === subKey);
  if (!cat || !sg) return ctx.answerCallbackQuery({ text: "–ü—ñ–¥–≥—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  await ctx.reply(`–ì—Ä—É–ø–∞: ${cat.title} ‚Üí ${sg.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`, {
    reply_markup: kbExercisesInSub(catKey, subKey),
  });
  await ctx.answerCallbackQuery();
});

/* ---------- delete-video message ---------- */
bot.callbackQuery(/^del:/, async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.answerCallbackQuery("–í–∏–¥–∞–ª–µ–Ω–æ");
  } catch {
    await ctx.answerCallbackQuery({ text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏" });
  }
});

/* ---------- noop ---------- */
bot.callbackQuery(/^noop:/, (ctx) => ctx.answerCallbackQuery());

/* ---------- express app ---------- */
const app = express();
app.get("/", (_: Request, res: Response) => res.status(200).send("alive"));
app.use(express.json());
app.use(`/webhook/${secret}`, webhookCallback(bot, "express"));

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Bot listening on ${port}`));
