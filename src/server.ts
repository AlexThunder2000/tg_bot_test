import express, { Request, Response } from "express";
import { Bot, webhookCallback, InlineKeyboard } from "grammy";
import { CATEGORIES } from "./data";

const token = process.env.BOT_TOKEN!;
const secret = process.env.SECRET_TOKEN || "secret";

if (!token) {
  throw new Error("BOT_TOKEN is required");
}

const bot = new Bot(token);

/* ---------- helpers ---------- */

// —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑ –µ–∫—Ä–∞–Ω–∞: —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ editMessageText, —è–∫—â–æ –Ω–µ –º–æ–∂–Ω–∞ ‚Äî –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async function editOrReply(
  ctx: any,
  text: string,
  reply_markup?: InlineKeyboard
) {
  try {
    // —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–µ ‚Äî –≤–∏–π–¥–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    await ctx.editMessageText(text, { reply_markup });
  } catch {
    // —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –±—É–ª–æ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/—ñ–Ω—à–∏–π —Ç–∏–ø ‚Äî –ø—Ä–æ—Å—Ç–æ —à–ª–µ–º–æ –Ω–æ–≤–µ
    await ctx.reply(text, { reply_markup });
  }
}

/* ---------- helper keyboards ---------- */
function kbMain() {
  return new InlineKeyboard()
    .text("–û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "menu:services").row()
    .text("–¢–µ—Ö–Ω—ñ–∫–∞ –≤–ø—Ä–∞–≤", "menu:technique").row()
    .text("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏", "menu:extra");
}

function kbCategories() {
  const kb = new InlineKeyboard();
  for (const c of CATEGORIES) kb.text(c.title, `cat:${c.key}`).row();
  kb.text("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ", "menu:root");
  return kb;
}

function kbSubgroups(catKey: string) {
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const kb = new InlineKeyboard();
  cat?.subgroups?.forEach((sg) => kb.text(sg.title, `sub:${catKey}:${sg.key}`).row());
  kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –≥—Ä—É–ø", "menu:technique").row().text("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ", "menu:root");
  return kb;
}

function kbExercisesInCat(catKey: string) {
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const kb = new InlineKeyboard();
  (cat?.exercises ?? []).forEach((x, i) => kb.text(x.title, `ex:${catKey}::${i}`).row());
  kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –≥—Ä—É–ø", "menu:technique").row().text("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ", "menu:root");
  return kb;
}

function kbExercisesInSub(catKey: string, subKey: string) {
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const sg = cat?.subgroups?.find((s) => s.key === subKey);
  const kb = new InlineKeyboard();
  (sg?.exercises ?? []).forEach((x, i) => kb.text(x.title, `ex:${catKey}:${subKey}:${i}`).row());
  kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –ø—ñ–¥–≥—Ä—É–ø", `cat:${catKey}`).row().text("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ", "menu:root");
  return kb;
}

/* ---------- menus ---------- */
// /start ‚Äî —Ñ–æ—Ç–æ + –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è + –º–µ–Ω—é
bot.command("start", async (ctx) => {
  const photoId =
    "AgACAgIAAxkBAAE7GPRoxsMmhCGCvJRpJNXBs7XcyPjbGAACBfsxG8OBOEp8zGPvGXLsiwEAAwIAA3kAAzYE";
  const caption =
    "–ü—Ä–∏–≤—ñ—Ç, —Ç–µ–±–µ –≤—ñ—Ç–∞—î: –î–º–∏—Ç—Ä–æ ‚Äî —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä, —á–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?";
  await ctx.replyWithPhoto(photoId, { caption, reply_markup: kbMain() });
});

// –û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Å–ª—É–≥–∏ ‚Üí –ø–æ–∫–∞–∑–∞—Ç–∏ 3 –∫–Ω–æ–ø–∫–∏
bot.callbackQuery("menu:services", async (ctx) => {
  await editOrReply(ctx, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", kbServices());
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("menu:extra", async (ctx) => {
  await editOrReply(
    ctx,
    "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ (PDF/–ø–æ—Å–∏–ª–∞–Ω–Ω—è).\n–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è: /start"
  );
  await ctx.answerCallbackQuery();
});

// 7 –≥—Ä—É–ø
bot.callbackQuery("menu:technique", async (ctx) => {
  await editOrReply(ctx, "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –º'—è–∑—ñ–≤:", kbCategories());
  await ctx.answerCallbackQuery();
});

// –Ω–∞–∑–∞–¥ –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (—Ç—É—Ç –∫—Ä–∞—â–µ —Ç–∞–∫–æ–∂ —á–µ—Ä–µ–∑ editOrReply, –±–æ –≤–∏–∫–ª–∏–∫ –π–¥–µ –∑ –º–µ–¥—ñ–∞)
bot.callbackQuery("menu:root", async (ctx) => {
  await editOrReply(ctx, "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª üëá", kbMain());
  await ctx.answerCallbackQuery();
});

/* ---------- services ---------- */
function kbServices() {
  return new InlineKeyboard()
    .text("1) –ü—Ä–æ–≥—Ä–∞–º–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —Ç–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è", "svc:prog").row()
    .text("2) –û–Ω–ª–∞–π–Ω —Å—É–ø—Ä–æ–≤—ñ–¥", "svc:online").row()
    .text("3) –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "svc:pt").row()
    .text("‚¨Ö –ù–∞–∑–∞–¥", "menu:root");
}

const FORM_URL =
  "https://docs.google.com/forms/d/e/1FAIpQLSck85art2UnEy-gYv4oIN-BwXaLLh7jQNg3WkzP0DVZ8pi_YA/viewform?usp=preview";
const DM_URL = "https://t.me/Dmchkft"; 

function kbServiceDetails() {
  return new InlineKeyboard()
    .url("üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É", FORM_URL)
    .row()
    .url("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ", DM_URL)
    .row()
   .text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Å–ª—É–≥", `del:${Date.now()}`);
}

bot.callbackQuery("svc:prog", async (ctx) => {
  await ctx.reply(
    'üîπ –ü—Ä–æ–≥—Ä–∞–º–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —Ç–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è ‚Äî 50$\n\n–¶–µ —ñ–¥–µ–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ —Å—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ, –∞–ª–µ –∑ —è–∫—ñ—Å–Ω–æ—é –±–∞–∑–æ—é:\n–†–∞–∑–æ–≤–µ —Å–∫–ª–∞–¥–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å ‚Äî –æ—Ç—Ä–∏–º–∞—î—à –≥–æ—Ç–æ–≤–∏–π –ø–ª–∞–Ω –ø—ñ–¥ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å —Ç–∞ —Ü—ñ–ª—ñ (—Å—Ö—É–¥–Ω–µ–Ω–Ω—è, –Ω–∞–±—ñ—Ä –º‚Äô—è–∑—ñ–≤, –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ–æ—Ä–º–∏).\n\n–°–∫–ª–∞–¥–∞–Ω–Ω—è –ø–ª–∞–Ω—É —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è ‚Äî –±–µ–∑ –∂–æ—Ä—Å—Ç–∫–∏—Ö –¥—ñ—î—Ç, –∞–ª–µ –∑—ñ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–º –º–µ–Ω—é, —è–∫–µ —Ä–µ–∞–ª—å–Ω–æ –≤–ø–∏—Å–∞—Ç–∏ —É —Ç–≤—ñ–π —Ä–∏—Ç–º –∂–∏—Ç—Ç—è.\n\n–í—ñ–¥–µ–æ-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–ø—Ä–∞–≤ ‚Äî —â–æ–± —Ç–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞–≤/–∑–Ω–∞–ª–∞, —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–∂–Ω—É –≤–ø—Ä–∞–≤—É.\n\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –ø—Ä–æ—Ç—è–≥–æ–º –ø–µ—Ä—à–∏—Ö 4 –¥–Ω—ñ–≤ ‚Äî –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —É—Ç–æ—á–Ω–∏—Ç–∏ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É, —â–æ–± –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è "–±—ñ–ª–∏—Ö –ø–ª—è–º".',
    { reply_markup: kbServiceDetails() }
  );
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("svc:online", async (ctx) => {
  await ctx.reply(
    "üîπ –û–Ω–ª–∞–π–Ω —Å—É–ø—Ä–æ–≤—ñ–¥ ‚Äî 100$\n\n–¢—É—Ç —Ç–∏ –Ω–µ –∑–∞–ª–∏—à–∞—î—à—Å—è –Ω–∞–æ–¥–∏–Ω—Ü—ñ –∑ –ø–ª–∞–Ω–æ–º ‚Äî —è –≤–µ–¥—É —Ç–µ–±–µ –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º:\n–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —Ç–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –ø—ñ–¥ —Ç–≤—ñ–π —Ä–µ–∂–∏–º, –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ —Ü—ñ–ª—ñ.\n\n–í—ñ–¥–µ–æ –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º —Ç–µ—Ö–Ω—ñ–∫–∏ –≤–ø—Ä–∞–≤ + –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–≤–æ—ó –≤—ñ–¥–µ–æ –¥–ª—è —Ä–æ–∑–±–æ—Ä—É.\n\n–©–æ—Ç–∏–∂–Ω–µ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ ‚Äî –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –ø—ñ–¥ —Ç–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å, —â–æ–± –Ω–µ –±—É–ª–æ –∑–∞—Å—Ç–æ—é.\n\n–í—ñ–¥–µ–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è ‚Äî –∂–∏–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç, –¥–µ –º–æ–∂–Ω–∞ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –≤—Å–µ –≤—ñ–¥ —Ç–µ—Ö–Ω—ñ–∫–∏ –¥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è.\n\n–ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–æ—Ä–º–∏ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—É ‚Äî —è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—é —Ç–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—é —Ä—É—Ö–∞—Ç–∏—Å—å –¥–∞–ª—ñ.\n\n–î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤—ñ–¥–µ–æ–º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É.\n\n–¶–µ –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è —Ç–∏—Ö, –∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π —Ñ—ñ–¥–±–µ–∫.",
    { reply_markup: kbServiceDetails() }
  );
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("svc:pt", async (ctx) => {
  await ctx.reply(
    "üîπ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî 200$\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ –π –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n12 –æ–Ω–ª–∞–π–Ω-—Ç—Ä–µ–Ω—É–≤–∞–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 1 –Ω–∞ 1 ‚Äî –ø–æ–≤–Ω–∞ —É–≤–∞–≥–∞ —Ç—ñ–ª—å–∫–∏ —Ç–æ–±—ñ, –∑ –∫–æ—Ä–µ–∫—Ü—ñ—î—é —Ç–µ—Ö–Ω—ñ–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.\n\n–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è —ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –ø—ñ–¥ —Ç–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.\n\n–ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –≤–ø—Ä–∞–≤ –ø—ñ–¥ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è, —è–∫–µ —î —É —Ç–µ–±–µ (–∑–∞–ª, –¥—ñ–º, –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä).\n\n–í—ñ–¥–µ–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É, –≤—ñ–¥—á—É—Ç—Ç—ñ–≤ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.\n\n–©–æ–¥–µ–Ω–Ω–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ ‚Äî —Ç–∏ –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É –∑—ñ –º–Ω–æ—é —É –ø–æ–≥–æ–¥–∂–µ–Ω–∏–π —á–∞—Å.\n\n–¶–µ –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ –¥–æ—Å—è–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —à–≤–∏–¥—à–µ —ñ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º",
    { reply_markup: kbServiceDetails() }
  );
  await ctx.answerCallbackQuery();
});

/* ---------- categories / subgroups ---------- */
bot.callbackQuery(/^cat:(.+)$/, async (ctx) => {
  const key = ctx.match![1];
  const cat = CATEGORIES.find((c) => c.key === key);
  if (!cat) return ctx.answerCallbackQuery({ text: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  if (cat.subgroups?.length) {
    await editOrReply(ctx, `–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–≥—Ä—É–ø—É:`, kbSubgroups(cat.key));
  } else {
    const list = cat.exercises ?? [];
    const kb = kbExercisesInCat(cat.key);
    await editOrReply(
      ctx,
      list.length
        ? `–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`
        : `–ì—Ä—É–ø–∞: ${cat.title}\n(–ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–ø—Ä–∞–≤)`,
      kb
    );
  }
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/^sub:([^:]+):(.+)$/, async (ctx) => {
  const [catKey, subKey] = [ctx.match![1], ctx.match![2]];
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const sg = cat?.subgroups?.find((s) => s.key === subKey);
  if (!cat || !sg) return ctx.answerCallbackQuery({ text: "–ü—ñ–¥–≥—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  await editOrReply(ctx, `–ì—Ä—É–ø–∞: ${cat.title} ‚Üí ${sg.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`, kbExercisesInSub(catKey, subKey));
  await ctx.answerCallbackQuery();
});

/* ---------- sending video with action buttons ---------- */
// callback_data —Ñ–æ—Ä–º–∞—Ç–∏:
//   ex:<catKey>::<idx>           ‚Äî –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –±–µ–∑ –ø—ñ–¥–≥—Ä—É–ø
//   ex:<catKey>:<subKey>:<idx>   ‚Äî –¥–ª—è –ø—ñ–¥–≥—Ä—É–ø
bot.callbackQuery(/^ex:([^:]+):(.*):(\d+)$/, async (ctx) => {
  const [catKey, maybeSub, idxStr] = [ctx.match![1], ctx.match![2], ctx.match![3]];
  const cat = CATEGORIES.find((c) => c.key === catKey);
  if (!cat) return ctx.answerCallbackQuery({ text: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  let title: string | undefined;
  let fileId: string | undefined;
  let backCb: string; // –∫—É–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—ñ–¥–µ–æ

  if (cat.subgroups?.length && maybeSub) {
    const sg = cat.subgroups.find((s) => s.key === maybeSub);
    const ex = sg?.exercises?.[Number(idxStr)];
    title = ex?.title;
    fileId = ex?.fileId;
    backCb = `back:sub:${catKey}:${maybeSub}`; // –Ω–∞–∑–∞–¥ —É —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤ –ø—ñ–¥–≥—Ä—É–ø–∏
  } else {
    const ex = cat.exercises?.[Number(idxStr)];
    title = ex?.title;
    fileId = ex?.fileId;
    backCb = `back:cat:${catKey}`; // –Ω–∞–∑–∞–¥ —É —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  }

  if (!fileId) return ctx.answerCallbackQuery({ text: "–í–ø—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  const underVideoKb = new InlineKeyboard()
    .text("‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", backCb)
    .row()
    .text("‚úñ –ó–∞–∫—Ä–∏—Ç–∏", `del:${Date.now()}`);

  if (title) await ctx.replyWithVideo(fileId, { caption: title, reply_markup: underVideoKb });
  else await ctx.replyWithVideo(fileId, { reply_markup: underVideoKb });

  await ctx.answerCallbackQuery();
});

/* ---------- back buttons that reply with the list (not edit video) ---------- */
bot.callbackQuery(/^back:cat:([^:]+)$/, async (ctx) => {
  const catKey = ctx.match![1];
  const cat = CATEGORIES.find((c) => c.key === catKey);
  if (!cat) return ctx.answerCallbackQuery({ text: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  if (cat.subgroups?.length) {
    await ctx.reply(`–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–≥—Ä—É–ø—É:`, {
      reply_markup: kbSubgroups(cat.key),
    });
  } else {
    const list = cat.exercises ?? [];
    const kb = kbExercisesInCat(cat.key);
    await ctx.reply(
      list.length
        ? `–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`
        : `–ì—Ä—É–ø–∞: ${cat.title}\n(–ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–ø—Ä–∞–≤)`,
      { reply_markup: kb }
    );
  }
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/^back:sub:([^:]+):(.+)$/, async (ctx) => {
  const [catKey, subKey] = [ctx.match![1], ctx.match![2]];
  const cat = CATEGORIES.find((c) => c.key === catKey);
  const sg = cat?.subgroups?.find((s) => s.key === subKey);
  if (!cat || !sg) return ctx.answerCallbackQuery({ text: "–ü—ñ–¥–≥—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

  await ctx.reply(`–ì—Ä—É–ø–∞: ${cat.title} ‚Üí ${sg.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`, {
    reply_markup: kbExercisesInSub(catKey, subKey),
  });
  await ctx.answerCallbackQuery();
});

/* ---------- delete-video message ---------- */
bot.callbackQuery(/^del:/, async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.answerCallbackQuery("–í–∏–¥–∞–ª–µ–Ω–æ");
  } catch {
    await ctx.answerCallbackQuery({ text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏" });
  }
});

/* ---------- noop ---------- */
bot.callbackQuery(/^noop:/, (ctx) => ctx.answerCallbackQuery());

/* ---------- express app ---------- */
const app = express();
app.get("/", (_: Request, res: Response) => res.status(200).send("alive"));
app.use(express.json());
app.use(`/webhook/${secret}`, webhookCallback(bot, "express"));

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Bot listening on ${port}`));
