"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { Bot, webhookCallback, InlineKeyboard } = require("grammy");
const { CATEGORIES } = require("./data");

let bot = null;

async function buildBot(token) {
  const b = new Bot(token);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
  await b.init();

  // –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
  const mainMenu = () => new InlineKeyboard()
    .text("–û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "menu:services").row()
    .text("–¢–µ—Ö–Ω—ñ–∫–∞ –≤–ø—Ä–∞–≤", "menu:technique").row()
    .text("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏", "menu:extra");

  // /start
  b.command("start", async (ctx) => {
    await ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª üëá", { reply_markup: mainMenu() });
  });

  // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏
  b.callbackQuery("menu:services", async (ctx) => {
    await ctx.editMessageText("–¢—É—Ç –±—É–¥–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏.\n–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è: /start");
    await ctx.answerCallbackQuery();
  });

  b.callbackQuery("menu:extra", async (ctx) => {
    await ctx.editMessageText("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ (PDF/–ø–æ—Å–∏–ª–∞–Ω–Ω—è).\n–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è: /start");
    await ctx.answerCallbackQuery();
  });

  // –ü–æ–∫–∞–∑–∞—Ç–∏ 7 –≥—Ä—É–ø
  b.callbackQuery("menu:technique", async (ctx) => {
    const kb = new InlineKeyboard();
    for (const c of CATEGORIES) kb.text(c.title, `cat:${c.key}`).row();
    kb.text("‚¨Ö –ù–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "menu:root");
    await ctx.editMessageText("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –º'—è–∑—ñ–≤:", { reply_markup: kb });
    await ctx.answerCallbackQuery();
  });

  // –ù–∞–∑–∞–¥ –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
  b.callbackQuery("menu:root", async (ctx) => {
    await ctx.editMessageText("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª üëá", { reply_markup: mainMenu() });
    await ctx.answerCallbackQuery();
  });

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  b.callbackQuery(/^cat:(.+)$/, async (ctx) => {
    const key = ctx.match[1];
    const cat = CATEGORIES.find((c) => c.key === key);
    if (!cat) {
      await ctx.answerCallbackQuery({ text: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
      return;
    }

    // –Ø–∫—â–æ —î –ø—ñ–¥–≥—Ä—É–ø–∏ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–≥—Ä—É–ø–∏
    if (cat.subgroups && cat.subgroups.length) {
      const kb = new InlineKeyboard();
      for (const sg of cat.subgroups)
        kb.text(sg.title, `sub:${cat.key}:${sg.key}`).row();
      kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –≥—Ä—É–ø", "menu:technique");
      await ctx.editMessageText(`–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–≥—Ä—É–ø—É:`, { reply_markup: kb });
    } else {
      // –Ø–∫—â–æ –ø—ñ–¥–≥—Ä—É–ø –Ω–µ–º–∞—î ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –≤–ø—Ä–∞–≤–∏ (–∫–æ–ª–∏ –¥–æ–¥–∞–º–æ fileId)
      const list = cat.exercises ?? [];
      const kb = new InlineKeyboard();
      if (list.length) {
        list.forEach((x, i) => kb.text(x.title, `ex:${cat.key}::${i}`).row());
      } else {
        kb.text("(–ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–ø—Ä–∞–≤)", `noop:${Date.now()}`).row();
      }
      kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –≥—Ä—É–ø", "menu:technique");
      await ctx.editMessageText(`–ì—Ä—É–ø–∞: ${cat.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`, { reply_markup: kb });
    }
    await ctx.answerCallbackQuery();
  });

  // –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–≥—Ä—É–ø
  b.callbackQuery(/^sub:([^:]+):(.+)$/, async (ctx) => {
    const [catKey, subKey] = [ctx.match[1], ctx.match[2]];
    const cat = CATEGORIES.find((c) => c.key === catKey);
    const sg = cat?.subgroups?.find((s) => s.key === subKey);
    if (!cat || !sg) {
      await ctx.answerCallbackQuery({ text: "–ü—ñ–¥–≥—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
      return;
    }
    const list = sg.exercises ?? [];
    const kb = new InlineKeyboard();
    if (list.length) {
      list.forEach((x, i) => kb.text(x.title, `ex:${cat.key}:${sg.key}:${i}`).row());
    } else {
      kb.text("(–ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–ø—Ä–∞–≤)", `noop:${Date.now()}`).row();
    }
    kb.text("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –ø—ñ–¥–≥—Ä—É–ø", `cat:${cat.key}`);
    await ctx.editMessageText(`–ì—Ä—É–ø–∞: ${cat.title} ‚Üí ${sg.title}\n–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`, {
      reply_markup: kb,
    });
    await ctx.answerCallbackQuery();
  });

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–µ–æ
  b.callbackQuery(/^ex:([^:]+):(.*):(\d+)$/, async (ctx) => {
    const [catKey, maybeSub, idxStr] = [ctx.match[1], ctx.match[2], ctx.match[3]];
    const cat = CATEGORIES.find((c) => c.key === catKey);
    if (!cat) {
      await ctx.answerCallbackQuery({ text: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
      return;
    }

    let title;
    let fileId;
    if (cat.subgroups && cat.subgroups.length && maybeSub && maybeSub !== "") {
      const sg = cat.subgroups.find((s) => s.key === maybeSub);
      const ex = sg?.exercises?.[Number(idxStr)];
      title = ex?.title;
      fileId = ex?.fileId;
    } else {
      const ex = cat.exercises?.[Number(idxStr)];
      title = ex?.title;
      fileId = ex?.fileId;
    }
    if (!fileId) {
      await ctx.answerCallbackQuery({ text: "–í–ø—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
      return;
    }

    await ctx.replyWithVideo(fileId, { caption: title });
    await ctx.answerCallbackQuery("–ì–æ—Ç–æ–≤–æ ‚úÖ");
  });

  // –ì–ª—É—à–∏–º–æ "–ø–æ—Ä–æ–∂–Ω—ñ" –∫–ª—ñ–∫–∏
  b.callbackQuery(/^noop:/, async (ctx) => {
    await ctx.answerCallbackQuery();
  });

  return b;
}

// –û—Å—å —Ç—É—Ç –∑–º—ñ–Ω—é—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç –¥–ª—è Cloudflare:
addEventListener("fetch", (event) => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  // 1) –ù–∞ GET/HEAD –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ "alive" (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)
  if (request.method === "GET" || request.method === "HEAD") {
    return new Response("alive", { status: 200 });
  }

  // 2) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É –¢–Ü–õ–¨–ö–ò –¥–ª—è POST (–≤–µ–±—Ö—É–∫–∏ Telegram)
  if (SECRET_TOKEN) {
    const got = request.headers.get("X-Telegram-Bot-Api-Secret-Token");
    if (got !== SECRET_TOKEN) {
      return new Response("Unauthorized", { status: 401 });
    }
  }

  // 3) –õ–µ–¥–∞—á–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
  if (!bot) {
    bot = await buildBot(BOT_TOKEN);
  }

  // 4) –ü–µ—Ä–µ–¥–∞—î–º–æ –∞–ø–¥–µ–π—Ç —É grammY
  const update = await request.json();
  await bot.handleUpdate(update);

  return new Response("ok");
}
